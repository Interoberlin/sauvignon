apply plugin: 'com.android.library'
apply plugin: 'maven'

import java.util.regex.Pattern

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.0'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "http://maven.interoberlin.de"
    }
}

ext.versionPatch = project.hasProperty('patch') ? project.getProperty('patch') : versionPatch

android {
    compileSdkVersion 21
    buildToolsVersion "21.0.2"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 19
        versionCode versionPatch as Integer ?: 0
        versionName versionMajor + "." + versionMinor + "." + versionPatch
    }
}

def sauvignonAarFile = file('build/outputs/aar/lib.aar')
artifacts {
    archives sauvignonAarFile
}

// --------------------
// Javadoc
// --------------------

ext.javadocDir = project.hasProperty('javadoc') ? project.getProperty('javadoc') : project.path + 'javadoc'

android.libraryVariants.all { variant ->
    // Tidy javadoc dir
    task "tidyJavadoc${variant.name}"(type: Delete) {
        delete new File(javadocDir + '/' + groupId + '/' + artifactId);
    }

    task "publishJavadoc${variant.name}"(type: Javadoc, dependsOn: "tidyJavadoc${variant.name}") {
        title = artifactId.capitalize()
        description = summary
        source = variant.javaCompile.source
        classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
        destinationDir = new File(javadocDir + '/' + groupId + '/' + artifactId)
        options {
            links "http://docs.oracle.com/javase/7/docs/api/"
            linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
        }
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

// --------------------
// Maven
// --------------------

uploadArchives {
    repositories {
        mavenDeployer {
            repository url: 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
            pom.groupId = groupId
            pom.artifactId = artifactId
            if (System.getenv("BUILD_NUMBER") != null)
                pom.version = versionMajor + '.' + versionMinor + '.' + System.getenv("BUILD_NUMBER")
            else
                pom.version = versionMajor + '.' + versionMinor + '.' + versionPatch
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}